********************************************************************************
The Psys Library
Version 0.2.1
Read-Me

Copyright (C) 2010  Denis Washington <dwashington@gmx.net>

The psys library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

The psys library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA  02110-1301  USA(see "3. Copyright" for copyright information)
********************************************************************************

0. Contents
   --------
1. Introduction
2. Design
3. Installation
4. Documentation
5. Contributing

1. Introduction
   ------------
The psys library provides a simple interface to the system package manager
of a Linux system. It allows installation programs to notify the package
manager of the installation, uninstallation and update of third-party
software packages, and to request these packages to be added to or removed
from the system package database. The psys library interface is generic
and not tied to a specific package management system or Linux distribution.

Note that the psys library is only useful for adding and removing software
which complies to the Linux Standard Base (LSB) specifications [1]. Most
notably, it is assumed that the data files of a software package are
installed into /opt as demanded by the Filesystem Hierarchy Standard (FHS)
[2], and that a package only depends on the interfaces and behavior
specified by the LSB; any additional dependencies must be contained within
the package itself.

The psys library interface is strongly influenced by the "Berlin Packaging
API" concept [3] discussed at the 2006 LSB face-to-face meeting in Berlin.
The library interface is meant as a proposal for a future version of the
LSB standard.

[1] http://www.linuxbase.org
[2] http://www.pathname.com/fhs/pub/fhs-2.3.html
[3] http://www.linuxfoundation.org/en/Berlin_Packaging_API

2. Implementation
   --------------
A complete psys implementation is divided into two parts, a "frontend" and
a "backend".

* The "frontend" implements the distribution-independent functions of the
  psys library, e.g. for the creation of the psys data structures. This
  part is fully implemented by the psys library sourcecode itself.

* The "backend" is specific to a package manager or Linux distribution and
  implements the actual core functionality of the psys library interface
  (that is, processing notifications and package registration requests
  from installation programs). It can either be implemented by the package
  manager / distribution directly or, otherwise, by a "fallback backend"
  built into the core psys library itself. Currently, the psys library
  comes with a fallback backend for RPM- and Debian-based distributions;
  others may be added in the future. See HACKING for general information
  about writing a psys library backend.

The availability of fallback backends means that the psys library can, in
principal, be used on today's distros by installation programs which ship
the library theirselves or statically link to it. As the psys library only
takes care of the commmunication with the package manager, but leaves the
actual installation / update / uninstallation to the installation program,
adopting an existing installer to use the psys interface should require
relatively little code modifications. 

3. Installation
   ------------
The psys library can be built like any autotools-powered project with

    ./configure [options]
    make
    make install  # as super user (root, sudo)

In addition to the standard configure options, the following can be
specified:

    --enable-fallback-rpm	Build RPM fallback backend (requires rpmlib)
    --enable-fallback-dpkg      Build DPKG fallback backend (requires libdpkg)
    --enable-fallback-all       Build all fallback backends

Note that in order to build the DPKG fallback backend, you need a version
of libdpkg.a which is compiled to position-independent code with -fPIC;
otherwise, linking will fail. As the libdpkg-dev package in the Debian
testing/unstable repositories is currently not built with -fPIC, you need
to build it yourself:

    git clone git://git.debian.org/git/dpkg/dpkg.git
    cd dpkg
    ## If you have a gettext version < 0.18 (e.g. Ubuntu 10.04): ##
    git checkout 1.15.7
    ## Add -fPIC to compiler flags ##
    echo "AM_CFLAGS += -fPIC" | cat lib/dpkg/Makefile.am - > Makefile.am.tmp
    cp Makefile.am.tmp lib/dpkg/Makefile.am
    rm Makefile.am.tmp
    ## Configure and install ##
    autoreconf -i
    ./configure
    cd lib/dpkg
    make
    make install  # as super user

Your dpkg installation will not be affected by this.
 
After having installed the psys library and a backend, you can test it by
building and running the examples in the examples/ sub-directory:

    cd examples/helloworld
    make
    ./installer
    ./updater
    ./uninstaller

(You will most probably have to run the example programs as super user.)

4. Documentation
   -------------
The psys library interface is documented in man page format; see the
psys(7) man page distributed with this library to get started.
Alternatively, all pages are available online at:

http://gitorious.org/libpsys/pages/ManPages

Also have a look at the examples in the examples/ sub-directory to see the
psys library in action. (See "3. Installation").

5. Contributing
   ------------
Contributions of any kind are, of course, very welcome! Please submit
bug reports, patches, feature requests and branch merge requests to
the libpsys newsgroup:

http://groups.google.com/group/libpsys

To track the development of the psys library and get the latest source
code, visit the project page on Gitorious:

http://gitorious.org/libpsys

You are free to publish any number psys library branches there if you like.

For some information about hacking on the psys library sourcecode, and a
short overview of writing psys library backends, see HACKING.
